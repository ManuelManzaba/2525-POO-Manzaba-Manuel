import json
import os


class Producto:
    def _init_(self, id_producto, nombre, cantidad, precio):
        self.id_producto = id_producto
        self.nombre = nombre
        self.cantidad = cantidad
        self.precio = precio

    def to_dict(self):
        return {
            'id_producto': self.id_producto,
            'nombre': self.nombre,
            'cantidad': self.cantidad,
            'precio': self.precio
        }

    @staticmethod
    def from_dict(data):
        return Producto(
            id_producto=data['id_producto'],
            nombre=data['nombre'],
            cantidad=data['cantidad'],
            precio=data['precio']
        )

    def _str_(self):
        return f"[{self.id_producto}] {self.nombre} - Cantidad: {self.cantidad}, Precio: ${self.precio:.2f}"


class Inventario:
    def _init_(self):
        self.productos = {}  # Usamos un diccionario para b√∫squedas r√°pidas por ID

    def agregar_producto(self, producto):
        if producto.id_producto in self.productos:
            print("‚ö† Ya existe un producto con ese ID.")
        else:
            self.productos[producto.id_producto] = producto
            print("‚úÖ Producto agregado correctamente.")

    def eliminar_producto(self, id_producto):
        if id_producto in self.productos:
            del self.productos[id_producto]
            print("‚úÖ Producto eliminado.")
        else:
            print("‚ùå Producto no encontrado.")

    def actualizar_producto(self, id_producto, cantidad=None, precio=None):
        if id_producto in self.productos:
            if cantidad is not None:
                self.productos[id_producto].cantidad = cantidad
            if precio is not None:
                self.productos[id_producto].precio = precio
            print("‚úÖ Producto actualizado.")
        else:
            print("‚ùå Producto no encontrado.")

    def buscar_por_nombre(self, nombre):
        encontrados = [p for p in self.productos.values() if p.nombre.lower() == nombre.lower()]
        if encontrados:
            for p in encontrados:
                print(p)
        else:
            print("üîç No se encontr√≥ ning√∫n producto con ese nombre.")

    def mostrar_todos(self):
        if not self.productos:
            print("üì≠ Inventario vac√≠o.")
        else:
            print("üìã Productos en inventario:")
            for p in self.productos.values():
                print(p)

    def guardar_en_archivo(self, archivo):
        with open(archivo, 'w') as f:
            json.dump([p.to_dict() for p in self.productos.values()], f, indent=4)
        print("üíæ Inventario guardado en archivo.")

    def cargar_desde_archivo(self, archivo):
        if not os.path.exists(archivo):
            print("üìÅ Archivo no encontrado. Se cargar√°n productos de ejemplo.")
            self.cargar_productos_de_ejemplo()
            return
        try:
            with open(archivo, 'r') as f:
                data = json.load(f)
                for item in data:
                    producto = Producto.from_dict(item)
                    self.productos[producto.id_producto] = producto
            print("üìÇ Inventario cargado desde archivo.")
        except json.JSONDecodeError:
            print("‚ùå Error al leer el archivo. Est√° da√±ado o vac√≠o.")

    def cargar_productos_de_ejemplo(self):
        ejemplo = [
            Producto("A100", "Silla de oficina", 20, 89.99),
            Producto("A101", "Escritorio de madera", 10, 159.50),
            Producto("A102", "L√°mpara LED", 35, 22.75),
            Producto("A103", "Archivador met√°lico", 5, 120.00),
            Producto("A104", "Pizarra blanca", 12, 45.90),
        ]
        for producto in ejemplo:
            self.agregar_producto(producto)


def mostrar_menu():
    print("""
üì¶ MEN√ö DE INVENTARIO
1. Agregar producto
2. Eliminar producto
3. Actualizar producto
4. Buscar producto por nombre
5. Mostrar todos los productos
6. Guardar inventario
7. Cargar inventario
8. Salir
""")


def main():
    inventario = Inventario()
    archivo = "inventario2.json"
    inventario.cargar_desde_archivo(archivo)

    while True:
        mostrar_menu()
        opcion = input("Selecciona una opci√≥n: ")

        if opcion == '1':
            id_producto = input("ID del producto: ")
            nombre = input("Nombre del producto: ")
            try:
                cantidad = int(input("Cantidad: "))
                precio = float(input("Precio: "))
                nuevo = Producto(id_producto, nombre, cantidad, precio)
                inventario.agregar_producto(nuevo)
            except ValueError:
                print("‚ùå Error: La cantidad y el precio deben ser n√∫meros.")

        elif opcion == '2':
            id_producto = input("ID del producto a eliminar: ")
            inventario.eliminar_producto(id_producto)

        elif opcion == '3':
            id_producto = input("ID del producto a actualizar: ")
            cantidad = input("Nueva cantidad (dejar vac√≠o para no modificar): ")
            precio = input("Nuevo precio (dejar vac√≠o para no modificar): ")
            inventario.actualizar_producto(
                id_producto,
                cantidad=int(cantidad) if cantidad else None,
                precio=float(precio) if precio else None
            )

        elif opcion == '4':
            nombre = input("Nombre del producto a buscar: ")
            inventario.buscar_por_nombre(nombre)

        elif opcion == '5':
            inventario.mostrar_todos()

        elif opcion == '6':
            inventario.guardar_en_archivo(archivo)

        elif opcion == '7':
            inventario.cargar_desde_archivo(archivo)

        elif opcion == '8':
            print("üëã Saliendo del sistema. ¬°Hasta luego!")
            break

        else:
            print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")


if _name_ == "_main_":
¬†¬†¬†¬†main()
